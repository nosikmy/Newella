openapi: 3.0.3
info:
  title: Newella
  description: OpenAPI documentation for Newella application
  version: 1.0.0
servers:
  - url: 'localhost:8080'
paths:
  /auth/sign-up:
    post:
      tags:
        - auth
      summary: registration)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: coolGuy2003
                email:
                  type: string
                  example: someEmail@email.com
                password:
                  type: string
                  example: superSecretWord
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: confirm email
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 5
  /auth/sign-in:
    post:
      tags:
        - auth
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: someEmail@email.com
                password:
                  type: string
                  example: superSecretWord
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        400:
          description: confirmation needed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: confirm email first
                  payload:
                    type: object
                    properties:
                      token:
                        type: string
                        example:

  /auth/fotgotPassword:
    post:
      tags:
        - auth
      summary: to change password in case you forgot password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: someMail@gmail.com
                newPassword:
                  type: string
                  example: newSecretWord
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: sent
                  payload:
                    type: string
                    example:

  /auth/confirm:
    post:
      tags:
        - auth
      summary: confirm data that needs to be committed
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: object
            example: confirm
            enum:
              - confirm
              - forgot
              - change
        - name: hash
          in: query
          required: true
          schema:
            type: string
            example: DWQO0DQO9Q8CQ3272H90XJ08JEXR6731*&@(#$*^@(*#()))
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: confirmed
                  payload:
                    type: string
                    example:
        400:
          description: wrong data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: invalid link, try to resend confirmation mail
                  payload:
                    type: string
                    example:

  /api/users:
    get:
      tags:
        - admin
      summary: get all users
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 100
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 3
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 128
                      rows:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            username:
                              type: string
                              example: someGuy23412
                            realName:
                              type: string
                              example: Issac Newton
                            email:
                              type: string
                              example: email@mail.com
  /api/users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 45
    get:
      tags:
        - userItself
        - admin
      summary: get user page (without his novels)
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  username:
                    type: string
                    example: someGuy23412
                  realName:
                    type: string
                    example: Issac Newton
                  description:
                    type: string
                    example: bla bla bla
                  email:
                    type: string
                    example: email@mail.com
                  subscribersNumber:
                    type: integer
                    example: 20
                  subscriptionsNumber:
                    type: integer
                    example: 35
    patch:
      tags:
        - userItself
        - admin
      summary: change some user data
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: New username
                realName:
                  type: string
                  example: Новое Имя
                description:
                  type: string
                  example: bla bla bla
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/users/changePassword:
    post:
      tags:
        - userItself
        - admin
      summary: change password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: somePassword
                newPassword:
                  type: string
                  example: ASDQWDQS
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
        400:
          description: Wrong password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: wrong password
                  payload:
                    type: string
                    example:
  /api/users/{userId}/subscribers:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          example: 56
    get:
      tags:
        - userInfo
      summary: to get all users subscribers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 51
                      rows:
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 2
                            username:
                              type: string
                              example: some_guy
                            image:
                              type: string
                              example: pic.jpg
  /api/users/{userId}/subscriptions:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          example: 45
    get:
      tags:
        - userInfo
      summary: to get all users subscriptions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 51
                      rows:
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 2
                            username:
                              type: string
                              example: some_guy
                            image:
                              type: string
                              example: pic.jpg
    post:
      tags:
        - userInfo
      summary: to sub to the {:userId} user from authorized user account
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/users/{userId}/subscriptions/{subId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          example: 78
      - name: subId
        in: path
        required: true
        schema:
          type: integer
          example: 56
    delete:
      tags:
        - userItself
        - admin
      summary: to delete some user from subscriptions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/users/{userId}/library:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          example: 78
    get:
      tags:
        - userInfo
      summary: to get all users novels
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            example: read
            description: favourite and released - helpful for user profile page, and others - for user personal library
            enum:
              - read
              - readable
              - favourite
              - created
              - wip
              - released
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 20
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 10
                      rows:
                        properties:
                          id:
                            type: integer
                            example: 2
                          name:
                            type: string
                            example: NOVEL
                          price:
                            type: integer
                            example: 0
                          image:
                            type: string
                            example: pick.jpg
                          rating:
                            type: number
                            example: 2.7
  /api/novels:
    get:
      tags:
        - novels
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 10
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: categoryId
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: priceLow
          in: query
          required: false
          schema:
            type: integer
            example: 20
        - name: priceHigh
          in: query
          required: false
          schema:
            type: integer
            example: 30
        - name: length
          in: query
          required: false
          schema:
            type: integer
            example: normal
            enum:
              - short
              - medium
              - long
        - name: authorId
          in: query
          required: false
          schema:
            type: integer
            example: 85
        - name: ratingLow
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: ratingHigh
          in: query
          required: false
          schema:
            type: integer
            example: 5
        - name: search
          in: query
          required: false
          schema:
            type: string
            example: cool
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            example: price ASC
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    properties:
                      tag:
                        type: string
                        example: some_1
        required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      count:
                        type: integer
                        example: 10
                      rows:
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: NOVEL
                            price:
                              type: integer
                              example: 0
                            image:
                              type: string
                              example: pic.jpg
                            rating:
                              type: number
                              example: 2.7
  /api/novels/{id}:
    parameters:
      - name: id
        in: query
        required: true
        schema:
          type: integer
          example: 24
    get:
      tags:
        - novels
      summary: to get one novel
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 3
                      name:
                        type: string
                        example: Some
                      description:
                        type: string
                        example: bla bla bla
                      price:
                        type: integer
                        example: 20
                      length:
                        type: string
                        example: short
                        enum:
                          - short
                          - medium
                          - long
                      status:
                        type: string
                        example: ok
                      image:
                        type: string
                        example: pic.jpg
                      rating:
                        type: number
                        example: 3.5
                      categoryId:
                        type: integer
                        example: 53
                      categoryRoute:
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: Category
                      tags:
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: screamers
    post:
      tags:
        - novels
      summary: to create novel rudiment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: novel 1
                description:
                  type: string
                  example: cool thing
                price:
                  type: integer
                  example: 50
                length:
                  type: string
                  example: short
                  enum:
                    - short
                    - medium
                    - long
                image:
                  type: string
                  example: pic.jpg
              required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: ok
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 20
    patch:
      tags:
        - novels
      summary: to fill novel rudiment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: novel 1
                description:
                  type: string
                  example: cool thing
                price:
                  type: integer
                  example: 50
                length:
                  type: string
                  example: short
                  enum:
                    - short
                    - medium
                    - long
                image:
                  type: string
                  example: pic.jpg
              required: false
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
    delete:
      tags:
        - novels
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/novel/{id}/slide:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
  /api/novel/{id}/slideGroup:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
  /api/novel/{id}/hero:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
  /api/novel/{id}/heroMood:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
  /api/novel/{id}/backGround:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
  /api/novel/{id}/favourites:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
    post:
      tags:
        - novel
      summary: to add novel to user's favs
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
    delete:
      tags:
        - novel
      summary: to delete novel from user's favs
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/novel/{id}/rate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
    post:
      tags:
        - novel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  example: 2.7
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/novel/{id}/complain:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
    post:
      tags:
        - novel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                subject:
                  type: string
                  example: bad words
                description:
                  type: string
                  example: i am so sensitive, can you please delete these all bad words?
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/novel/{id}/comment:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
    post:
      tags:
        - novel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: funny
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/novel/{id}/read:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
    post:
      tags:
        - novel
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'
  /api/novel/{id}/saveProgress:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 56
    post:
      tags:
        - novel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                slideGroupNumber:
                  type: integer
                  example: 2
                slideNumber:
                  type: integer
                  example: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse200'

components:
  schemas:
    StatusResponse200:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: ok
        payload:
          type: string
          example: